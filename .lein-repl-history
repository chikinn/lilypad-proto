(require '[hiccup.core :as h])
(h/html [:h1 "Hello Word"])
-main
for i in $( 1 2 3 ); do
(require '[clojure.java.jdbc :as sql])
(sql/query "postgresql://localhost:5432/lilypad-proto"
["select * from test"])
(sql/query "postgresql://localhost:5432/lilypad-proto"
["select * from test"])
(def a {:id 1, :example "hello?"})
a
(get a :id)
(get a :example)
(get (sql/query "postgresql://localhost:5432/lilypad-proto"
                         ["select * from test"]) :example)
(get (sql/query "postgresql://localhost:5432/lilypad-proto" ["select * from test"]) :example)
(sql/query "postgresql://localhost:5432/lilypad-proto" ["select * from test"])
sql/query "postgresql://localhost:5432/lilypad-proto" ["select * from test"]
(def query-result (sql/query  "postgresql://localhost:5432/lilypad-proto"  ["select * from test"]))
(get query-result :example)
(sql/query "postgresql://localhost:5432/lilypad-proto"  ["select * from test"])
(def a (sql/query "postgresql://localhost:5432/lilypad-proto"  ["select * from test"]))
a
query-result
(get query-result :example)
(def a sql/query "postgresql://localhost:5432/lilypad-proto"  ["select * from test"])
(let [query-result (sql/query "postgresql://localhost:5432/lilypad-proto"  ["select * from test"])] query-result)
(let [query-result (sql/query "postgresql://localhost:5432/lilypad-proto"  ["select * from test"])] (get query-result :id))
(let [query-result (sql/query "postgresql://localhost:5432/lilypad-proto"  ["select * from test"])] (get (nth query-result 0) :id))
(let [query-result (sql/query "postgresql://localhost:5432/lilypad-proto"  ["select * from test"])] (get (nth query-result 0) :example))
(def a (1 2))
(def a [1 2])
a
(first a)
(nth a 0)
(str "a" "b")
(print "hi")
(print-str "hi")
(print-str TABLE)
(print-str :TABLE)
(sql/insert! DB :test {:example "from repl"})
(sql/query DB ["select * from test"])
(sql/insert! DB :test {:example "from repl"})
(sql/insert! DB :test {:example from repl})
(sql/insert! DB :test {:example 'from repl'})
(sql/insert! DB :test {:example "'from repl'"})
(sql/insert! DB :test {:example "from repl"})
(sql/insert! DB :test {:id "DEFAULT" :example "from repl"})
(sql/db-do-commands DB (sql/create-table-ddl :testing [:data :text]))
(sql/insert! DB :testing {:data "Hello"})
(sql/db-do-commands DB (sql/create-table-ddl :test [:id :smallserial :data :text]))
(sql/db-do-commands DB (sql/create-table-ddl :test [:id :smallserial] [:data :text]))
(sql/insert! DB :test {:data "Hello"})
(sql/insert! DB :test {:data "Hello2"})
(def a :test)
a
(sql/insert! DB a {:data "Hello3"})
(sql/query DB ["select * from test"])
(sql/db-do-commands DB (sql/create-table-ddl :nodes [:id :smallserial] [:title :text] [:prereq :text] [:desc :text] [:example :text] [:comment :text]))
getNextException
(getNextException)
(sql/db-do-commands DB (sql/create-table-ddl :nodes [:id :smallserial] [:title :text] [:prereq :text] [:desc :text] [:example :text] [:comment :text]))
(getNextException)
(sql/db-do-commands DB (sql/create-table-ddl :nodes [:id :smallserial] [:title :text] [:prereq :tex] [:desc :text] [:example :text] [:comment :text]))
(sql/db-do-commands DB (sql/create-table-ddl :nodes [:id :smallserial] [:title :text] [:prereq :text] [:desc :text] [:example :text] [:comment :text]))
(sql/db-do-commands DB (sql/create-table-ddl :test2 [:id :smallserial] [:data :text]))
(sql/db-do-commands DB (sql/create-table-ddl :test2 [:id :smallserial] [:title :text]))
(sql/db-do-commands DB (sql/create-table-ddl :test3 [:id :smallserial] [:title :text] [:prereq :smallint[]]))
(sql/db-do-commands DB (sql/create-table-ddl :test [:prereq :smallint[]]))
(sql/db-do-commands DB (sql/create-table-ddl :test [:prereq :smallint\[\]]))
(sql/db-do-commands DB (sql/create-table-ddl :test [:prereq :smallint()]))
(sql/db-do-commands DB (sql/create-table-ddl :test [:prereq :smallint(1)]))
(sql/db-do-commands DB (sql/create-table-ddl :test [:prereq :smallint[1]]))
(sql/db-do-commands DB (sql/create-table-ddl :test [:prereq "smallint[]"]))
(sql/db-do-commands DB (sql/create-table-ddl :nodes [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comment :text]))
(sql/db-do-commands DB (sql/create-table-ddl :nodes [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
(def a [1 2 3])
a
(print a)
params
:params
params
(sql/insert! DB TABLE_KEYWORD {:title "Fib" :prereq 123 :descr "Famous seq" :example "1 1 2 3 5 ..." :comment "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib" :prereq 123 :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib" :prereq "123" :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib" :prereq [123] :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib" :prereq "[123]" :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib" :prereq [123] :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib" :prereq (123) :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib" :prereq "(123)" :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/get-connection DB)
(def my-vec (vector-to-array [1 2 3])
)
(def my-vec (vector-to-array [1 2 3]))
my-vec
(def my-vec (vector-to-array [1 2 3]))
my-vec
(def my-vec (vector-to-array [1 2 3]))
my-vec
(def my-vec (vector-to-array [1 2 3]))
my-vec
(sql/insert! DB TABLE_KEYWORD {:title "Fib" :prereq my-vec :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/query DB ["select * from nodes"])
(def res (sql/query DB ["select * from nodes"]))
res
(res :title)
(:title res)
(:title (first res))
(:prereq (first res))
(def req (:prereq (first res)))
req
(int-array (1 2 3))
(int-array [1 2 3])
(vector-to-array [1 2])
(def list1 (java.util.ArrayList. [1 2 3]))
(into [] (java.util.ArrayList. [1 2 3]))
(vector-to-array [1 2])
(into [] (vector-to-array [1 2]))
(print (vector-to-array [1 2]))
(seq .getArray (vector-to-array [1 2]))
(seq (.getArray (vector-to-array [1 2])))
(def a (seq-to-array [1 2 3]))
(array-to-seq a)
(def a (seq-to-array (1 2 3)))
(def a (seq-to-array #(1 2 3)))
(def a (seq-to-array '(1 2 3)))
(array-to-seq a)
(def b (seq-to-array '(1 2 3)))
(array-to-seq b)
(vec (sort [2 4 3]))
(def a (seq-to-array [1 2]))
(array-to-vector a)
(sql/query DB "select * from nodes")
(def res (sql/query DB "select * from nodes"))
(:title (first res))
(:prereq (first res))
(array-to-vector (:prereq (first res)))
res
(:prereq (first (sql/query DB "select * from nodes")))
(array-to-vector (:prereq (first (sql/query DB "select * from nodes"))))
(with-open [conn (sql/get-connection DB)] (array-to-vector (:prereq (first (sql/query DB "select * from nodes"))))
)
(with-open [conn (sql/get-connection DB)] (array-to-vector (:prereq (first (sql/query {:connection conn} DB "select * from nodes")))))
(:prereq (first (sql/query DB "select * from nodes")))
(sql/insert! DB TABLE_KEYWORD {:title "Fib2" :prereq my-vec [1 2] "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib2" :prereq my-vec "[1 2]" "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib2" :prereq [1 2] "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib2" :prereq "?::int[]" [1 2] "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(:prereq (first (sql/query DB "select * from nodes")))
(sql/insert! DB TABLE_KEYWORD {:title "Fib2" :prereq (seq-to-array [1 2]) "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib2" :prereq (seq-to-array [1 2]) :title "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib2" :prereq (seq-to-array [1 2]) :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/insert! DB TABLE_KEYWORD {:title "Fib2" :prereq [1 2] :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(:prereq (first (sql/query DB "select * from nodes")))
(sql/query DB "select * from nodes")
(update {:test "1"} :test int)
(update {:test 1} :test str)
(read-string "9")
(read-string "1 2 3")
(read-string (str "[" "1 2 3" "]"))
(sql/query DB "select * from nodes")
(def a {:test 123})
(:test a)
(sql/query DB "select * from nodes")
(sql/query DB "select * from nodes where id=1")
(sql/query DB "select * from nodes where id=4")
(vector (1 2 3))
(vector '(1 2 3))
(vector 1 2 3)
(get-row 1)
(def row2 (get-row 1))
row2
(:title row2)
row
row2
(page-head "hi")
(page-head (first ["hi"]))
(page-head (:title {:title "hi"}))
(get-row 1)
(:title (get-row 1))
(get-row 1)
(seq 1 2)
(sql/query DB "select * from nodes")
(sql/query DB "select * from nodes where id=7")
(:descr (sql/query DB "select * from nodes where id=7"))
(:descr (first (sql/query DB "select * from nodes where id=7")))
(def a "bcdef\r\n tesst")
a
(:descr (first (sql/query DB "select * from nodes where id=8")))
(:comm (first (sql/query DB "select * from nodes where id=8")))
(= "" (:comm (first (sql/query DB "select * from nodes where id=8"))))
(= "" (:comm (first (sql/query DB "select * from nodes where id=7"))))
(if 1 print("hi"))
(if 1 (print "hi"))
(if 1 (println "hi"))
(if 0 (println "hi"))
(if 0 (println))
(if 1 (println))
(if 1 "yes")
(if 0 "yes")
(if 0 "yes" "no")
(if nil "yes")
(if -1 "yes "no")
(if -1 "yes" "no")
(if "" "yes" "no")
(get-row 1000)
(:title (get-row 1000))
(str nil)
(get-row nil)
(get-row -1)
(case "a"
  "a" (println "yep") (println "still yep"))
(sql/insert! DB TABLE_KEYWORD {:title "Fib2" :prereq [1 2] :descr "Famous seq" :example "1 1 2 3 5 ..." :comm "Testing"})
(sql/delete! DB TABLE_KEYWORD ["id = ?" 3])
(nth (1 2) 1)
(nth '(1 2) 1)
(nth '(1 2) 2)
(clojure.string/split "who aa" #" ")
(split "aa bb" #" ")
(last (1 2))
(last '(1 2))
(split "aabb" #" ")
(sql/delete! DB TABLE_KEYWORD ["id = ?" "6"])
(sql/delete! DB TABLE_KEY ["id = ?" "6"])
(some #{101} '(100 101 102))
(sql/query DB (str "select * from " TABLE " where prereq @> '{" 6 "}'::smallint[]"))
(sql/query DB (str "select * from " TABLE " where id=6"))
(def row (sql/query DB (str "select * from " TABLE " where id=6")))
row
(update row :prereq (vector (remove #{id})))
(update row :prereq (vector (remove #{1})))
(update row :prereq (vector (remove #{"1"})))
(remove-val-from-vector 1 [1 2 3])
(update row :prereq (remove #{"1"}))
(def row (sql/query DB (str "select * from " TABLE " where id=6")))
row
(update row :prereq (remove #{"1"}))
(update (first row) :prereq (remove #{"1"}))
(update (first row) :prereq (vec (remove #{"1"})))
(update (first row) :prereq (remove #{"1"}))
(remove-val-from-vector 1 [1 2 3])
(def row (sql/query DB (str "select * from " TABLE " where id=6")))
row
(update (first row) :prereq (vec (remove #{1})))
(update (first row) :prereq (remove-value-from-vector 1))
(update (first row) :prereq (remove-val-from-vector 1))
(update (first row) :prereq (partial remove-val-from-vector 1))
(sql/db-do-commands DB "drop table nodes")
(sql/db-do-commands DB (sql/create-table-ddl TABLE_KEY [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
(read-string "1")
(def all-rows (get-all-rows))
all-rows
(def row (get-row 1))
row
(map read-string (map :id all-rows))
(map :id all-rows)
(vec "1")
(vec 1)
(vec "1" "2")
(vec ["1" "2"])
["1"]
(update {:test "1"} :test vec)
(update {:test "1"} :nope vec)
(def affected-rows (sql/query DB (str "select * from " TABLE " where prereq @> '{" id "}'::smallint[]")))
(def affected-rows (sql/query DB (str "select * from " TABLE " where prereq @> '{" id "}'::smallint[]"))
(def affected-rows (sql/query DB (str "select * from " TABLE " where prereq @> '{" 1 "}'::smallint[]"))
)
affected-rows
(def affected-row (first affected-rows))
affected-row
(remove-prereq 1 affected-row)
(def affected-rows (sql/query DB (str "select * from " TABLE " where prereq @> '{" 1 "}'::smallint[]")))
(def affected-row (first affected-rows))
(remove-prereq 1 affected-row)
(remove-prereq "1" affected-row)
affected-row
(remove-val-from-vec 1 [1 1])
(remove-val-from-vec 1 [1 2])
(update affected-row :prereq (partial remove-val-from-vec 1))
(sql/db-do-commands DB "drop table nodes")
(sql/db-do-commands DB (sql/create-table-ddl TABLE_KEY [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
(sql/query DB (str "select * from " TABLE " where prereq @> '{" 1 "}'::smallint[]"))
(def affected-rows (sql/query DB (str "select * from " TABLE " where prereq @> '{" 1 "}'::smallint[]")))
(def affected-row (first affected-rows))
affected-row
(defn remove-val-from-vec [value vect]
    (vec (remove #{value} vect)))
  (defn remove-prereq [prereq row]
    (edit-node (:id row) (update row :prereq (partial remove-val-from-vec prereq))))
(map (partial remove-prereq (read-string id)) affected-rows))
(map (partial remove-prereq (read-string id)) affected-rows)
(map (partial remove-prereq (read-string "1")) affected-rows)
(map (partial remove-prereq 1) affected-rows)
(partial remove-prereq 1)
(remove-prereq 1 affected-row)
(:id affected-row)
(update affected-row :prereq (partial remove-val-from-vec 1))
(edit-node 2 (update affected-row :prereq (partial remove-val-from-vec 1)))
(edit-node 2 (update affected-row :prereq (partial remove-val-from-vec "1")))
(edit-node "2" (update affected-row :prereq (partial remove-val-from-vec 1)))
(sql/db-do-commands DB "drop table nodes")
(sql/db-do-commands DB (sql/create-table-ddl TABLE_KEY [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
(def affected-rows (sql/query DB (str "select * from " TABLE " where prereq @> '{" 1 "}'::smallint[]")))
affected-rows
(defn remove-val-from-vec [value vect]
    (vec (remove #{value} vect)))
  (defn remove-prereq [prereq row]
    (edit-node (str (:id row)) (update row :prereq (partial remove-val-from-vec prereq))))
(map (partial remove-prereq id) affected-rows)
(map (partial remove-prereq 1) affected-rows)
(delete-node 1)
(delete-node "1")
(delete-node "4")
(sql/db-do-commands DB "drop table nodes")
(sql/db-do-commands DB (sql/create-table-ddl TABLE_KEY [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
(delete-node 1)
(delete-node "1")
(delete-node "3")
(sql/db-do-commands DB "drop table nodes")
(sql/db-do-commands DB (sql/create-table-ddl TABLE_KEY [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
(delete-node 1)
(delete-node 5)
(delete-node 6)
(sql/db-do-commands DB "drop table nodes")
(sql/db-do-commands DB (sql/create-table-ddl TABLE_KEY [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
(int 1)
(type 1)
(sql/db-do-commands DB "drop table nodes")
(sql/db-do-commands DB (sql/create-table-ddl TABLE_KEY [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
(sql/db-do-commands DB "drop table nodes")
(sql/db-do-commands DB (sql/create-table-ddl TABLE_KEY [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
(sql/db-do-commands DB "drop table nodes")
(sql/db-do-commands DB (sql/create-table-ddl TABLE_KEY [:id :smallserial] [:title :text] [:prereq "smallint[]"] [:descr :text] [:example :text] [:comm :text]))
